

var x : int := 32;

var y : real[3] := {1.1, 2.2, 3.3};

var x : (a : int) -> int := @(){
    var array : real[30] 
            := {1,3,4};

    return array;
};


var woah :  (a : int) ->
            (a, b) ->
            ( c,  d) -> real
    := @() {
    1 + 1;
    return dfdf
    break
};

var tom : (x : int, y : int, z : int) -> real[30]

var derp : (bob : d, int, real, (int, real) -> int, () -> int) -> real[20]

var bob := if x = 3 { 3 } else {4}

return x;

y := if x 3 else 4

while 1 4

woah()()();

var x := @(){
    1+1;
};


while(true) {
    print("hey");
    continue;
}

continue;

if x > 3 4

;

x[3](33);


x().hello()()().ha()().ho := 32;

var y : list[3] := { a, b, {c, d}};


users.foreach(
    @(a := 3,  b) {
        print(derp);
    }
);


do 
    while 1
        ;
while 4 < 3


while x <= 4 {
    1+1;
    a := "32";
    x += 1;
    x := 1;
}

break

for x <- {1 => 100} {
    x := x + 1;
    return x;
    break;
}

switch(x) {
    case /^[abc]*+?(a+)(b+)|32/ , hey -> @(x, x) {
            print(derp);
            print(ahah);
            print(10^"30");

            5 + /abc/;
        }
    case /^hello$/ -> @() {
        omnom;
    }
    default -> @() {
    
        ahaha;
    }
}

1+1 2+2


class bob : tom {
    var xyz := "hey"
    
    class bob : tom {
        var bob := "derp";
    }
    
    var x : bob;
    


};

2.2 * 4 * @(){ 1+1; };



if x = 4 {
    print(x)
}
else if(x = 3) 
{
    print(haha)
}
else {

    print(haha)
}

var a : int[3]
var b : int[5]

listener(1) {
    1 + 1;
    var y := @( x,  y,  z) {
        3+3;
    };
}

enum bob {
    derp := 30, omg, haha

}

1+1;

for x <- {1 => 100} {
    1+1;
}

var dict := {
    "abc" -> "hahahahahah", 
    "hererr" -> "adfadsf",
    "adsf" -> "adsfadsf"
};

var x : string[23][23][23][23][23];
